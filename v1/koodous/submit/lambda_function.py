#lambda pre-built imorts
import json
import boto3
import base64
from botocore.exceptions import ClientError

#lambda external imports
import requests

def return_code(status, body):
    return {"statusCode": status,"body":json.dumps(body)}


try:
    s3_client = boto3.client('s3')
except Exception as e:
    print(e)

def getFileObject(Bucket,Key):
    try:
        file_object = s3_client.get_object(Bucket=Bucket,Key=Key)
        if file_object:
            return {'code':'SUCCESS','content':file_object['Body'].read()}
        else:
            return {'code':'ERROR','content':'Could not get file from s3.'}
    except Exception as E:
        if "NoSuchKey" in str(E):
            return {'code':'NOT_FOUND','content':'File not found.'}
        else:
            return {'code':'ERROR','content':'Unknown error'}

def get_secret(secret_name,region_name):

    # Create a Secrets Manager client
    session = boto3.session.Session()
    client = session.client(
        service_name='secretsmanager',
        region_name=region_name
    )

    # In this sample we only handle the specific exceptions for the 'GetSecretValue' API.
    # See https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_GetSecretValue.html
    # We rethrow the exception by default.

    try:
        get_secret_value_response = client.get_secret_value(
            SecretId=secret_name
        )
    except ClientError as e:
        if e.response['Error']['Code'] == 'DecryptionFailureException':
            # Secrets Manager can't decrypt the protected secret text using the provided KMS key.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'InternalServiceErrorException':
            # An error occurred on the server side.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'InvalidParameterException':
            # You provided an invalid value for a parameter.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'InvalidRequestException':
            # You provided a parameter value that is not valid for the current state of the resource.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'ResourceNotFoundException':
            # We can't find the resource that you asked for.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
    else:
        # Decrypts secret using the associated KMS CMK.
        # Depending on whether the secret is a string or binary, one of these fields will be populated.
        if 'SecretString' in get_secret_value_response:
            secret = get_secret_value_response
            return secret['SecretString']
        else:
            decoded_binary_secret = base64.b64decode(get_secret_value_response['SecretBinary'])
            return decoded_binary_secret
            
    return None
    

#loading secret before lambda_handler to avoid cold boot delays
try:
    koodousApiKey = get_secret(secret_name = "koodousApiKey", region_name = "eu-west-1")
except Exception as e:
    print(e)

def lambda_handler(event, context):
    try:
        if event['pathParameters'] and event['pathParameters']['proxy']:
            sha256 = event['pathParameters']['proxy']
            fileObject = getFileObject(Bucket='malscanbotfiles', Key=sha256)
            if fileObject['code'] == 'SUCCESS':
                url_koodous = "https://api.koodous.com/apks/%s/get_upload_url" % sha256
                headers = {'Authorization': 'Token '+str(koodousApiKey)}
                requestUrl = requests.get(url=url_koodous, headers=headers)
                if requestUrl.status_code == 200:
                    files = {'file': fileObject['content']}
                    requestUpload  = requests.post(url=requestUrl.json().get('upload_url'), files=files)
                    if requestUpload.status_code == 201:
                        return return_code(201, 'APK Submited succesfully to Koodous.')
                    if requestUpload.status_code == 415:
                        return return_code(415, 'Error - APK not valid, please submit valid APK file')
                if requestUrl.status_code == 409:
                    return return_code(409,'Error - APK already in Koodous DB.')
            else:
                return return_code(404,"Cant send file not in db, please upload it first")
        else:
            return return_code(400, 'sha256 param must be present.')
                    
    except Exception as E:
        print(E)
        return return_code(501, 'Internal server error')
    