#builtin imports
import boto3
import base64
from botocore.exceptions import ClientError
import json
from botocore.vendored import requests



#environment variables
opswat_results_table = 'opswat_results'
opswsat_api_key_secret_name = 'opswat_api_key'
region_name = 'eu-west-1'
opswat_api_base_url = 'https://api.metadefender.com/v2/'

print("starting")
def get_secret(secret_name,region_name):

    # Create a Secrets Manager client
    session = boto3.session.Session()
    client = session.client(
        service_name='secretsmanager',
        region_name=region_name
    )

    # In this sample we only handle the specific exceptions for the 'GetSecretValue' API.
    # See https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_GetSecretValue.html
    # We rethrow the exception by default.

    try:
        get_secret_value_response = client.get_secret_value(
            SecretId=secret_name
        )
    except ClientError as e:
        if e.response['Error']['Code'] == 'DecryptionFailureException':
            # Secrets Manager can't decrypt the protected secret text using the provided KMS key.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'InternalServiceErrorException':
            # An error occurred on the server side.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'InvalidParameterException':
            # You provided an invalid value for a parameter.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'InvalidRequestException':
            # You provided a parameter value that is not valid for the current state of the resource.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'ResourceNotFoundException':
            # We can't find the resource that you asked for.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
    else:
        # Decrypts secret using the associated KMS CMK.
        # Depending on whether the secret is a string or binary, one of these fields will be populated.
        if 'SecretString' in get_secret_value_response:
            secret = get_secret_value_response
            return secret['SecretString']
        else:
            decoded_binary_secret = base64.b64decode(get_secret_value_response['SecretBinary'])
            return decoded_binary_secret
            
    return None


#loading secret before lambda_handler to avoid cold boot delays
try:
    opswat_api_key = get_secret(secret_name = opswsat_api_key_secret_name, region_name = region_name )
except Exception as e:
    print(e)


try:
    dynamodb = boto3.resource('dynamodb')
    table = dynamodb.Table(opswat_results_table)
except Exception as E:
    print(E)

def get_file_report_from_dynamodb(sha256):
    try:
        sha256 = sha256.lower()
        result = table.get_item(Key={"sha256":sha256})
        if "Item" in result.keys():
            return {"code":"SUCCESS","content": result['Item']}
        else:
            return {"code" : "NOT_FOUND","content" :"report not found"}

    except Exception as E:
        print(E)
        return {'code':'UNKNOWN','content':'Unknown error.'}



def return_code(status, body):
    return {"statusCode": status,"body": json.dumps(body)}


def lambda_handler(event, context):
    try:
        if event['pathParameters'] and event['pathParameters']['proxy']:
            sha256 = event['pathParameters']['proxy']
            sha256 = sha256.lower()
            result = table.get_item(Key={"sha256":sha256})
            if "Item" in result.keys():
                return return_code(200,result['Item'])
            else:
                hash_url = opswat_api_base_url+'hash/'+sha256
                headers = {'apikey':opswat_api_key,'file_metadata': str(1)}
                response = requests.get(hash_url,headers=headers)
                if response.status_code == 200:
                    response = response.json()
                    if sha256.upper() in response.keys():
                        return return_code(404,"Hash not found in opswat.")
                    else:
                        return return_code(200,response)
                else:
                    return return_code(501, 'Internal server error')
        else:
            return return_code(400, 'sha256 param must be present.')
                    
    except Exception as E:
        print(E)
        return return_code(501, 'Internal server error')
    