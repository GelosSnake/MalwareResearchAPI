#many thanks to upsidetravel!
#for better understanding how to build proper clamav lambda function please read their amazing article
#https://github.com/upsidetravel/bucket-antivirus-function 

import json
import boto3
from subprocess import check_output, Popen, PIPE, STDOUT
import uuid
import time
import os

malscanbot_s3_bucket_name = "malscanbotfiles"
clam_scan_results_table_name = 'clamav_results'
AV_DEFINITION_S3_BUCKET = 'malscanbotclamavdefinitions'
AV_DEFINITION_PATH = '/tmp/clamav_defs'
AV_DEFINITION_FILENAMES = ["main.cvd","daily.cvd","bytecode.cvd"]


def create_dir(path):
    if not os.path.exists(path):
        print("Attempting to create directiory %s.\n" % path)
        os.makedirs(path)
        return True
    else:
        return True
        
def update_defs_from_s3():
    if create_dir(AV_DEFINITION_PATH):
        s3 = boto3.resource('s3')
        s3_client = boto3.client('s3')
        for filename in AV_DEFINITION_FILENAMES:
            local_path = os.path.join(AV_DEFINITION_PATH,filename)
            print("Downloading definition file %s from s3://%s" % (filename, os.path.join(AV_DEFINITION_S3_BUCKET)))
            try:
                result = s3.Bucket(AV_DEFINITION_S3_BUCKET).download_file(filename, local_path)
            except Exception as E:
                print(E)
                return False
    return True
        
def scanFile(path):
    try:
        av_env = os.environ.copy()
        print("Starting clamscan of %s." % path)
        av_proc = Popen(['./clamscan',"-v","-a","--stdout","-d",AV_DEFINITION_PATH,path],stderr=STDOUT,stdout=PIPE,env=av_env)
        output = av_proc.communicate()[0]
        print("clamscan output:\n%s" % output)
        if av_proc.returncode == 0:
            return {'code':'CLEAN','content':'ClamAV: CLEAN.','scan_log':output}
        elif av_proc.returncode == 1:
            return {'code':'INFECTED','content':'ClamAV: INFECTED','scan_log':output}
        elif av_proc.returncode == -9:
            return {'code':'ERROR','content':'ClamAV returned -9','scan_log':output}
        else:
            msg = "Unexpected exit code from clamscan: %s.\n" % av_proc.returncode
            print(msg)
            return {'code':'ERROR','content':'Unknown Error','scan_log':output}
    except Exception as E:
        print(E)
        return {'code':'ERROR','content':'Unknown error','scan_log':E}

def return_code(status, body):
    return {"statusCode": status,"body":json.dumps(body)}

def getFileObject(Bucket,Key):
    try:
        file_object = s3_client.get_object(Bucket=Bucket,Key=Key)
        if file_object:
            return {'code':'SUCCESS','content':file_object['Body'].read()}
        else:
            return {'code':'ERROR','content':'Could not get file from s3.'}
    except Exception as E:
        if "NoSuchKey" in str(E):
            return {'code':'NOT_FOUND','content':'File not found.'}
        else:
            return {'code':'ERROR','content':'Unknown error'}

def clamav_scan_file(sha256):
    try:
        file_obj = getFileObject(Bucket=malscanbot_s3_bucket_name, Key=sha256)
        if file_obj['code'] == 'SUCCESS':
            path = '/tmp/' + sha256
            tmpFile = open(path, "wb")
            tmpFile.write(file_obj['content'])
            return scanFile(path)
        else:
            return {'code':'ERROR','content':'Unknown error'}
    except Exception as E:
        print(E)
        return {'code':'ERROR','content':'Unknown error'}

try:
    s3_client = boto3.client('s3')
except Exception as e:
    print(e)
    
try:
    dynamodb = boto3.resource('dynamodb')
    table = dynamodb.Table(clam_scan_results_table_name)
except Exception as E:
    print(E)


def lambda_handler(event, context):
    if update_defs_from_s3():
        try:
            if event['Records'][0]['Sns']['Message']:
                sha256 = event['Records'][0]['Sns']['Message']
                result = clamav_scan_file(sha256)
                table.put_item(Item={'guid':str(uuid.uuid1()),"sha256":sha256.lower(),
                'scan_results': result['content'],'scan_log': result['scan_log'],'time':int(time.time())})
                return return_code(200,"clamav scan result: "+result['content'])
        except Exception as E:
            print(E)
            return return_code(501, 'Internal server error')
    else:
        return return_code(501, 'Internal server error')