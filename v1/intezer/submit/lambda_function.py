#builtin imports
import boto3
import base64
from botocore.exceptions import ClientError
import json
from botocore.vendored import requests



#environment variables
intezer_api_key_secret_name = 'api_key_intezer'
region_name = 'eu-west-1'
intezer_api_base_url = 'https://analyze.intezer.com/api/v2-0'
malscanbot_s3_bucket_name = "malscanbotfiles"
intezer_analysis_url_2_sha256_table = 'intezer_analysis_ids_to_sha256'

try:
    s3_client = boto3.client('s3')
except Exception as e:
    print(e)

def getFileObject(Bucket,Key):
    try:
        file_object = s3_client.get_object(Bucket=Bucket,Key=Key)
        if file_object:
            return {'code':'SUCCESS','content':file_object['Body'].read()}
        else:
            return {'code':'ERROR','content':'Could not get file from s3.'}
    except Exception as E:
        if "NoSuchKey" in str(E):
            return {'code':'NOT_FOUND','content':'File not found.'}
        else:
            return {'code':'ERROR','content':'Unknown error'}


def get_secret(secret_name,region_name):

    # Create a Secrets Manager client
    session = boto3.session.Session()
    client = session.client(
        service_name='secretsmanager',
        region_name=region_name
    )

    # In this sample we only handle the specific exceptions for the 'GetSecretValue' API.
    # See https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_GetSecretValue.html
    # We rethrow the exception by default.

    try:
        get_secret_value_response = client.get_secret_value(
            SecretId=secret_name
        )
    except ClientError as e:
        if e.response['Error']['Code'] == 'DecryptionFailureException':
            # Secrets Manager can't decrypt the protected secret text using the provided KMS key.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'InternalServiceErrorException':
            # An error occurred on the server side.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'InvalidParameterException':
            # You provided an invalid value for a parameter.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'InvalidRequestException':
            # You provided a parameter value that is not valid for the current state of the resource.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'ResourceNotFoundException':
            # We can't find the resource that you asked for.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
    else:
        # Decrypts secret using the associated KMS CMK.
        # Depending on whether the secret is a string or binary, one of these fields will be populated.
        if 'SecretString' in get_secret_value_response:
            secret = get_secret_value_response
            return secret['SecretString']
        else:
            decoded_binary_secret = base64.b64decode(get_secret_value_response['SecretBinary'])
            return decoded_binary_secret
            
    return None


#loading secret before lambda_handler to avoid cold boot delays
try:
    intezer_api_key = get_secret(secret_name = intezer_api_key_secret_name, region_name = region_name )
except Exception as e:
    print(e)
    
    
try:
    dynamodb = boto3.resource('dynamodb')
    table = dynamodb.Table(intezer_analysis_url_2_sha256_table)
except Exception as E:
    print(E)


def return_code(status, body):
    return {"statusCode": status,"body":json.dumps(body)}



response = requests.post(intezer_api_base_url + '/get-access-token', json={'api_key': intezer_api_key})
response.raise_for_status()
session = requests.session()
session.headers['Authorization'] = session.headers['Authorization'] = 'Bearer %s' % response.json()['result']


def lambda_handler(event, context):
    try:
        if event['pathParameters'] and event['pathParameters']['proxy']:
            sha256 = event['pathParameters']['proxy']
            fileObject = getFileObject(Bucket=malscanbot_s3_bucket_name, Key=sha256)
            if fileObject['code'] == 'SUCCESS':
                files = {'file': fileObject['content']}
                response = session.post(intezer_api_base_url + '/analyze', files=files)
                if (response.status_code == 201) or (response.status_code == 200): 
                    try:
                        #intezer submissions expired after 3 months so we will add aTTL value of 120960 sec
                        response = table.put_item(Item={"sha256":sha256.lower(),"result_url":intezer_api_base_url+response.json()['result_url'],"TTL":120960})
                        return return_code(200,"file submitted to intezer successfully, please check back later for result.")
                    except Exception as E:
                        print(E)
                        return return_code(501, 'Internal server error')
                else:
                    return return_code(501, 'Internal server error')
            else:
                return return_code(404,"Cant send file not in db, please upload it first")
        else:
            return return_code(400, 'sha256 param must be present.')
    except Exception as E:
        print(E)
        return return_code(501, 'Internal server error')