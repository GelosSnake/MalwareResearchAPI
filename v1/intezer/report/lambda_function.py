#builtin imports
import boto3
import base64
from botocore.exceptions import ClientError
import json
from botocore.vendored import requests



#environment variables
intezer_api_key_secret_name = 'api_key_intezer'
region_name = 'eu-west-1'
intezer_api_base_url = 'https://analyze.intezer.com/api/v2-0'
intezer_analysis_url_2_sha256_table = 'intezer_analysis_ids_to_sha256'



def get_secret(secret_name,region_name):

    # Create a Secrets Manager client
    session = boto3.session.Session()
    client = session.client(
        service_name='secretsmanager',
        region_name=region_name
    )

    # In this sample we only handle the specific exceptions for the 'GetSecretValue' API.
    # See https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_GetSecretValue.html
    # We rethrow the exception by default.

    try:
        get_secret_value_response = client.get_secret_value(
            SecretId=secret_name
        )
    except ClientError as e:
        if e.response['Error']['Code'] == 'DecryptionFailureException':
            # Secrets Manager can't decrypt the protected secret text using the provided KMS key.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'InternalServiceErrorException':
            # An error occurred on the server side.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'InvalidParameterException':
            # You provided an invalid value for a parameter.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'InvalidRequestException':
            # You provided a parameter value that is not valid for the current state of the resource.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'ResourceNotFoundException':
            # We can't find the resource that you asked for.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
    else:
        # Decrypts secret using the associated KMS CMK.
        # Depending on whether the secret is a string or binary, one of these fields will be populated.
        if 'SecretString' in get_secret_value_response:
            secret = get_secret_value_response
            return secret['SecretString']
        else:
            decoded_binary_secret = base64.b64decode(get_secret_value_response['SecretBinary'])
            return decoded_binary_secret
            
    return None


try:
    malwareResearchApiKey = get_secret(secret_name = "malscanbotMalwareResearchApiKey", region_name = "eu-west-1")
except Exception as e:
    print(e)

#loading secret before lambda_handler to avoid cold boot delays
try:
    intezer_api_key = get_secret(secret_name = intezer_api_key_secret_name, region_name = region_name )
except Exception as e:
    print(e)

try:
    dynamodb = boto3.resource('dynamodb')
    table = dynamodb.Table(intezer_analysis_url_2_sha256_table)
except Exception as E:
    print(E)


response = requests.post(intezer_api_base_url + '/get-access-token', json={'api_key': intezer_api_key})
response.raise_for_status()
session = requests.session()
session.headers['Authorization'] = 'Bearer %s' % response.json()['result']


def return_code(status, body):
    return {"statusCode": status,"body": json.dumps(body)}


def get_analysis_url_from_dynamodb(sha256):
    try:
        sha256 = sha256.lower()
        result = table.get_item(Key={"sha256":sha256})
        if "Item" in result.keys():
            return {"code":"SUCCESS","content": result['Item']}
        else:
            return {"code" : "NOT_FOUND","content" :"report not found"}

    except Exception as E:
        print(E)
        return {'code':'UNKNOWN','content':'Unknown error.'}

def lambda_handler(event, context):
    try:
        if event['pathParameters'] and event['pathParameters']['proxy']:
            sha256 = event['pathParameters']['proxy']
            sha256 = sha256.lower()
            result = get_analysis_url_from_dynamodb(sha256)
            if result['code'] == 'SUCCESS':
                data = {'api_key':intezer_api_key}
                result_url = result['content']['result_url']
                response = session.get(result['content']['result_url'])
                if response.status_code == 404:
                    return return_code(404,"Report not found")
                if response.status_code == 202:
                    return return_code(201,"Analysis in progress please try again later.")
                if response.status_code == 200:
                        return return_code(200,response.json())
                else:
                    return return_code(501, 'Internal server error')
            if result['code'] == 'NOT_FOUND':
                return return_code(404,"Analysis not foud, please submit to intezer first.")
            else:
                return return_code(501, 'Internal server error')
        else:
            return return_code(400, 'sha256 param must be present.')
    except Exception as E:
        print(E)
        return return_code(501, 'Internal server error')