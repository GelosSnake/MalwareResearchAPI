import json
from botocore.vendored import requests
import boto3
import base64
from botocore.exceptions import ClientError


#external imports
import magic

malscanbot_s3_bucket_name = "malscanbotfiles"
malscanbotfiles_table_name = 'malscanbotfiles'

def return_code(status, body):
    return {"statusCode": status,"body":json.dumps(body)}

def getFileObject(Bucket,Key):
    try:
        file_object = s3_client.get_object(Bucket=Bucket,Key=Key)
        if file_object:
            return {'code':'SUCCESS','content':file_object['Body'].read()}
        else:
            return {'code':'ERROR','content':'Could not get file from s3.'}
    except Exception as E:
        if "NoSuchKey" in str(E):
            return {'code':'NOT_FOUND','content':'File not found.'}
        else:
            return {'code':'ERROR','content':'Unknown error'}

try:
    dynamodb = boto3.resource('dynamodb')
    table = dynamodb.Table(malscanbotfiles_table_name)
except Exception as E:
    print(E)


try:
    s3_client = boto3.client('s3')
except Exception as e:
    print(e)


def lambda_handler(event, context):
    try:
        if event['Records'][0]['s3']['object']['key']:
            sha256 = event['Records'][0]['s3']['object']['key']
            fileObject = getFileObject(Bucket=malscanbot_s3_bucket_name, Key=sha256)
            if fileObject['code'] == 'SUCCESS':
                file_magic = magic.from_buffer(fileObject['content'])
                try:
                    UpdateExpression="set mime_type = :r"
                    ExpressionAttributeValues={':r': file_magic}
                    response = table.update_item(Key={"sha256":sha256.lower()},UpdateExpression=UpdateExpression,ExpressionAttributeValues=ExpressionAttributeValues)
                    return return_code(200,"file mimetype: ."+file_magic)
                except Exception as E:
                    print(E)
                    return return_code(501, 'Internal server error')

            else:
                return return_code(404,"Cant send file not in db, please upload it first")
        else:
            return return_code(400, 's3 key name not found in event')
    except Exception as E:
        print(E)
        return return_code(501, 'Internal server error')
    